import prisma from "@/prisma/client";
import { addDays, endOfDay } from "date-fns";
import type { Metadata } from "next";
import localFont from "next/font/local";
import AllProviders from "./AllProviders";
import Navbar from "./components/Navbar";
import Sidebar from "./components/Sidebar";
import "./globals.css";
import getSession from "./libs/getSession";

const iranYekan_bold = localFont({
  src: "./fonts/IRANYekanBold.ttf",
  variable: "--font-iran-yekan-bold",
});
const iranYekan_regular = localFont({
  src: "./fonts/IRANYekanRegular.ttf",
  variable: "--font-iran-yekan-regular",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await getSession();

  const [notifications, unReadNotificationCount, authenticatedUser] =
    await Promise.all([
      prisma.notification.findMany({
        where: {
          isRead: false,
          assignedToUserId:
            session?.user.role === "USER" ? session?.user.id : undefined,
        },

        orderBy: { createdAt: "desc" },
        take: 5,
      }),

      prisma.notification.count({
        where: {
          isRead: false,
          assignedToUserId:
            session?.user.role === "ADMIN" ? undefined : session?.user.id,
        },
      }),

      session?.user
        ? prisma.user.findUnique({ where: { id: session?.user.id } })
        : undefined,
    ]);

  // Notify user if assigned porforma invoices will expire in 2 days
  const currentDate = new Date();
  const twoDaysFromNowEnd = endOfDay(addDays(currentDate, 2));

  const porformaInvoicesExpiringInTwoDays =
    await prisma.porformaInvoice.findMany({
      where: {
        expiredAt: {
          lte: twoDaysFromNowEnd,
        },
        status: "IN_PROGRESS",
      },
    });

  // Create related notification record for it
  await Promise.all(
    porformaInvoicesExpiringInTwoDays.map(async (por_invoice) => {
      const porInvoiceexpireNotification = await prisma.notification.findFirst({
        where: {
          assignedToUserId: por_invoice.assignedToUserId,
          message: { contains: por_invoice.porformaInvoiceNumber },
          assignedToSection: "POR_INVOICE",
          type: "WARNING",
        },
      });

      if (!porInvoiceexpireNotification)
        await prisma.notification.create({
          data: {
            assignedToUserId: por_invoice.assignedToUserId,
            message: `شماره پیش فاکتور ${por_invoice.porformaInvoiceNumber} به زودی منقضی میشود`,
            assignedToPorInvoiceId: por_invoice.id,
            type: "WARNING",
            assignedToSection: "POR_INVOICE",
          },
        });
    })
  );

  // Notify user if assigned porforma invoices have been expired
  const expiredPorformaInvoices = await prisma.porformaInvoice.findMany({
    where: {
      status: "EXPIRED",
    },
  });

  // Create related notification record for it
  await Promise.all(
    expiredPorformaInvoices.map(async (por_invoice) => {
      const porInvoiceexpireNotification = await prisma.notification.findFirst({
        where: {
          assignedToUserId: por_invoice.assignedToUserId,
          assignedToPorInvoiceId: por_invoice.id,
          assignedToSection: "POR_INVOICE",
          type: "EXPIRED",
        },
      });

      if (!porInvoiceexpireNotification)
        await prisma.notification.create({
          data: {
            assignedToUserId: por_invoice.assignedToUserId,
            message: `شماره پیش فاکتور ${por_invoice.porformaInvoiceNumber} منقضی شد`,
            assignedToPorInvoiceId: por_invoice.id,
            type: "EXPIRED",
            assignedToSection: "POR_INVOICE",
          },
        });
    })
  );

  return (
    <html lang="fa" dir="rtl" className="bg-neutral-50">
      <body
        className={`${iranYekan_bold.variable} ${iranYekan_regular.variable} antialiased relative `}
      >
        <AllProviders>
          <div>
            <Sidebar session={session!} />
          </div>

          <main className={`flex flex-col ${session && "mr-[66px]"} h-full`}>
            <nav className="w-full">
              <Navbar
                session={session!}
                authenticatedUser={authenticatedUser!}
                unReadNotificationCount={unReadNotificationCount}
                notifications={notifications}
              />
            </nav>

            {children}
          </main>
        </AllProviders>
      </body>
    </html>
  );
}
