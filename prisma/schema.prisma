generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  hashedPassword String
  adminName      String?
  companyName    String?
  companyBranch  String?
  itManager      String?
  address        String?
  image          String?
  role           Role    @default(USER)

  notification            Notification[]
  tickets                 Ticket[]
  proformaInvoices        PorformaInvoice[]
  invoices                Invoice[]
  TicketMessage           TicketMessage[]
  ArchivedPorformaInvoice ArchivedPorformaInvoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Invoice {
  id                 String         @id @default(cuid())
  invoiceNumber      String         @unique
  price              Int
  tax                Float
  priceWithTax       Float
  organization       String
  description        String
  organizationBranch String
  assignedToUserId   String
  issuerId           String
  Notification       Notification[]
  // image String

  User User @relation(fields: [assignedToUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PorformaInvoice {
  id                    String   @id @default(cuid())
  porformaInvoiceNumber String   @unique
  organization          String
  description           String
  organizationBranch    String
  assignedToUserId      String
  issuerId              String
  status                Status   @default(IN_PROGRESS)
  expiredAt             DateTime

  notifications Notification[]
  // image String

  User User @relation(fields: [assignedToUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id            String          @id @default(cuid())
  category      Category
  title         String          @db.VarChar(255)
  ticketMessage TicketMessage[]
  ticketNumber  Int             @unique @default(autoincrement())
  status        TicketStatus    @default(OPEN)
  issuerId      String

  User User @relation(fields: [issuerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketMessage {
  id                String         @id @default(cuid())
  message           String         @db.Text
  assignetoTicketId String
  messageType       MessageType
  issuerId          String
  canBeModified     Boolean        @default(true)
  notification      Notification[]

  User   User   @relation(fields: [issuerId], references: [id])
  Ticket Ticket @relation(fields: [assignetoTicketId], references: [id])

  createdAt DateTime @default(now())
}

model Notification {
  id                String           @id @default(cuid())
  message           String
  type              NotificationType
  isRead            Boolean          @default(false)
  assignedToSection Section

  assignedToTicketMessageId String?
  TicketMessage             TicketMessage? @relation(fields: [assignedToTicketMessageId], references: [id])

  assignedToPorInvoiceId String?
  porformaInvoice        PorformaInvoice? @relation(fields: [assignedToPorInvoiceId], references: [id])

  assignedToInvoiceId String?
  invocie             Invoice? @relation(fields: [assignedToInvoiceId], references: [id])

  assignedToUserId String
  user             User   @relation(fields: [assignedToUserId], references: [id])

  ArchivedPorformaInvoice   ArchivedPorformaInvoice? @relation(fields: [archivedPorformaInvoiceId], references: [id])
  archivedPorformaInvoiceId String?

  createdAt DateTime @default(now())
}

model ArchivedPorformaInvoice {
  id                    String    @id @default(cuid())
  porformaInvoiceNumber String    @unique
  organization          String
  description           String
  organizationBranch    String
  assignedToUserId      String
  issuerId              String
  status                Status
  expiredAt             DateTime?

  notifications Notification[]

  User User @relation(fields: [assignedToUserId], references: [id])

  createdAt  DateTime @default(now())
  archivedAt DateTime @default(now())
}

enum Section {
  INVOICE
  POR_INVOICE
  TICKET
  TICKET_MESSAGE
}

enum NotificationType {
  INFO
  WARNING
  EXPIRED
}

enum MessageType {
  REQUEST
  RESPONCE
}

enum TicketStatus {
  OPEN
  INVESTIGATING
  CLOSED
}

enum Status {
  IN_PROGRESS
  EXPIRED
}

enum Category {
  TECHNICAL_SUPPORT
  PAYMENT
  FEATURE_REQUEST
  GENERAL_INQUIRY
}
